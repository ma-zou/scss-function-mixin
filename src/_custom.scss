// Use this file for your custom mixins/functions

// your custom.scss vars
// $insta-grad: radial-gradient(circle farthest-corner at 35% 90%, #fec564, transparent 50%), radial-gradient(circle farthest-corner at 0 140%, #fec564, transparent 50%), radial-gradient(ellipse farthest-corner at 0 -25%, #5258cf, transparent 50%), radial-gradient(ellipse farthest-corner at 20% -50%, #5258cf, transparent 50%), radial-gradient(ellipse farthest-corner at 100% 0, #893dc2, transparent 50%), radial-gradient(ellipse farthest-corner at 60% -20%, #893dc2, transparent 50%), radial-gradient(ellipse farthest-corner at 100% 100%, #d9317a, transparent), linear-gradient(#6559ca, #bc318f 30%, #e33f5f 50%, #f77638 70%, #fec66d 100%);

$grad-1: #136a8a;
$grad-2: #267871;
$grad: linear-gradient(to right, $grad-1, $grad-2);


//mixing for padding left/right top/bottom and all
@mixin padding($type, $gaps: $base-gap) {    
    @if $type == "lr" {
        padding-left:#{rem($gaps)};
        padding-right:#{rem($gaps)}; 
    } @else if $type == "tb" {
        padding-top:#{rem($gaps)};
        padding-bottom:#{rem($gaps)};   
    } @else if $type == "b" {
        padding:#{rem($gaps)};  
    } @else {
        @warn "invalide type Choose 'tb' for top/bottom or 'lr' for left/right";
    }
}

//mixing for margin left/right top/bottom and all
@mixin margin($type, $gaps: $base-gap) {    
    @if $type == "lr" {
        margin-left:#{rem($gaps)};
        margin-right:#{rem($gaps)}; 
    } @else if $type == "tb" {
        margin-top:#{rem($gaps)};
        margin-bottom:#{rem($gaps)};     
    } @else if $type == "b" {
        margin:#{rem($gaps)};
    } @else {
        @warn "invalide type Choose 'tb' for top/bottom or 'lr' for left/right";
    }
}

// define Size shorthand Width and Height
@mixin size($height, $width) {
    height: $height;
    width: $width;
}

/// Center with margin and display block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Center Absolute in horizontal, vertical or both
@mixin center($dir: false) {
    @if $dir == "h" {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    } @else if $dir == "v" {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);       
    } @else {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

// Pseudo Element Requirements
@mixin pseudo ($position: absolute, $display: block, $content: '') {
    position: $position;
    display: $display;
    content: '';
}

// Responsive seperation Classes
$sep-px: (
    'unset': 0px,
    'thin':30px,
    'med': 100px,
    'large': 120px,
    'thick': 150px
);

@mixin responsive-sep($breakpoint,$sep-px) {

    @each $key, $val in $sep-px {

        .#{$breakpoint}-sep-both-#{$key} {
            padding-top:#{rem($val)};
            padding-bottom:#{rem($val)};
        }

        .#{$breakpoint}-sep-bot-#{$key} {
           padding-top:0;
           padding-bottom:#{rem($val)};
        }

        .#{$breakpoint}-sep-top-#{$key} {
            padding-top:#{rem($val)};
            padding-bottom:0;
        }
    }
}

// Grid classes for default breakpoint (no min-width)
@include responsive-sep(default,$sep-px);

// Generate column classes
@each $point, $width in $breakpoints {
    @include breakpoint($point) {
        @include responsive-sep($point, $sep-px);
    }
}

// Breakpoints with max-width
@mixin max-breakpoint($point) {
    @if map-has-key($breakpoints, $point) {
        @media (max-width: map-get($breakpoints, $point)) { @content; }
    }
    @else {
        @warn "The breakpoint #{$point} is not associated with a min-width.";
    }
}


/////// |   | ///////////////////////// |   | ///////
/////// |   | /////// Optional //////// |   | ///////
////// \     / /////////////////////// \     / //////
/////// \___/  //////////////////////// \___/  //////


// @mixin gradient-border {
//     background:$grad;
//     width:100%;
//     height:rem(1px);
//     @include pseudo;
// }

// @mixin animatedHeader($img, $time: 60s, $animation: animatedHeader) {
//     position: relative;
//     overflow: hidden;

//     &:before {
//         width:100%;
//         height:100%;
//         content: "";
//         position: absolute;
//         background:url($img) center no-repeat;
//         background-size:cover;
//         top:0;
//         left:0;
//         transform: translateZ(0);
//         z-index: -1;
//         animation: $time $animation linear 10ms infinite;
//         background-attachment:fixed;
//         transition:all 0.2s ease-in-out;
//     }
//     @keyframes animatedHeader {
//         0% {
//             transform: scale(1);
//         }
//         50% {
//             transform: scale(1.1);
//         }
//     }
// }
