// Use this file for your custom mixins/functions

$grad-1: #000;
$grad-2: rgba(255,255,255,0);
$grad: linear-gradient(to top, $grad-1, $grad-2);
$base-gap: 16px;
$base-font-size: 16px;
$bp-context: 16px;


$breakpoints: (
    'tiny':     em(480px, $bp-context),
    'small':    em(640px, $bp-context),
    'medium':   em(800px, $bp-context),
    'large':    em(992px, $bp-context),
    'giant':    em(1200px, $bp-context),
    'huge':     em(1520px, $bp-context)
);

@mixin breakpoint($point, $direction: min) {
    @if map-has-key($breakpoints, $point) {
        @media ( #{$direction+'-width'}:
            if( $direction == min, map-get($breakpoints, $point), map-get($breakpoints, $point) - em(1px))
        ) { @content; }
    }
    @else {
        @error "The breakpoint #{$point} is not associated with a min/max-width.";
    }
}

@function rem($to-size, $from-size: $base-font-size) {
    @if $to-size == 0px { @return 0 }
    @return $to-size / $from-size * 1rem;
}


//mixing for padding left/right top/bottom and all
@mixin padding($type, $gaps: $base-gap) {    
    @if $type == "lr" {
        padding-left:#{rem($gaps)};
        padding-right:#{rem($gaps)}; 
    } @else if $type == "tb" {
        padding-top:#{rem($gaps)};
        padding-bottom:#{rem($gaps)};   
    } @else if $type == "b" {
        padding:#{rem($gaps)};  
    } @else {
        @warn "invalide type Choose 'tb' for top/bottom or 'lr' for left/right";
    }
}

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@function z($name) {
    @if index($z-indexes, $name) {
        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
        @return null;
    }
}
$z-indexes: (
    "outdated-browser",
    "modal",
    "site-header",
    "page-wrapper",
    "site-footer"
);

//mixing for margin left/right top/bottom and all
@mixin margin($type, $gaps: $base-gap) {    
    @if $gaps != "auto" {
        $gaps: #{rem($gaps)};
    }

    @if $type == "lr" {
        margin-left:$gaps;
        margin-right:$gaps; 
    } @else if $type == "tb" {
        margin-top:$gaps;
        margin-bottom:$gaps;     
    } @else if $type == "b" {
        margin:$gaps;
    } @else {
        @warn "invalide type Choose 'tb' for top/bottom or 'lr' for left/right";
    }
}

// Photoshop letter Tracking -> CSS Letter Spacing
@function ls($ps-value) {
    @return $ps-value / 1000 * 16px;
}

@mixin responsive-image($name) {
    background:url('/images/layout/#{$name}-bg-small.jpg') no-repeat center center;
    background-size:cover;
    background-attachment: fixed;
    
    @include breakpoint(small) {
        background:url('/images/layout/#{$name}-bg-medium.jpg') no-repeat center center;
        background-size:cover;
        background-attachment: fixed;
        
        @include breakpoint(medium) {
            background:url('/images/layout/#{$name}-bg-full.jpg') no-repeat center center;
            background-size:cover;
            background-attachment: fixed;
        }
    }
}

// define Size shorthand Width and Height
@mixin size($height, $width: null) {
    @if ($width) {
        height: #{rem($height)};
        width: #{rem($width)};
    } @else {
        height:#{rem($height)};
        width:#{rem($height)};
    }
}

/// Center with margin and display block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Center Absolute in horizontal, vertical or both
@mixin center($dir: false) {
    @if $dir == "h" {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    } @else if $dir == "v" {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);       
    } @else {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

// Pseudo Element Requirements
@mixin pseudo ($position: absolute, $display: block, $content: '') {
    position: $position;
    display: $display;
    content: $content;
}

// Responsive seperation Classes
$sep-px: (
    'unset': 0px,
    'small':40px,
    'medium': 100px,
    'large': 150px,
    'hr': 75px
);

@mixin responsive-sep($breakpoint,$sep-px) {

    @each $key, $val in $sep-px {

        .#{$breakpoint}-sep-both-#{$key} {
            padding-top:#{rem($val)};
            padding-bottom:#{rem($val)};
        }

        .#{$breakpoint}-sep-bot-#{$key} {
           padding-top:0;
           padding-bottom:#{rem($val)};
        }

        .#{$breakpoint}-sep-top-#{$key} {
            padding-top:#{rem($val)};
            padding-bottom:0;
        }
    }
}

// Grid classes for default breakpoint (no min-width)
@include responsive-sep(default,$sep-px);

// Generate column classes
@each $point, $width in $breakpoints {
    @include breakpoint($point) {
        @include responsive-sep($point, $sep-px);
    }
}

// Breakpoints with max-width
@mixin max-breakpoint($point) {
    @if map-has-key($breakpoints, $point) {
        @media (max-width: map-get($breakpoints, $point)) { @content; }
    }
    @else {
        @warn "The breakpoint #{$point} is not associated with a min-width.";
    }
}


/////// |   | /////// Optional //////// |   | ///////


// $shadow: rem(0px) rem(17px) rem(48px) rem(8px) rgba(0,0,0,0.62);
// $shadow2: rem(0px) rem(17px) rem(48px) rem(8px) rgba(0,0,0,0.15);

// @mixin gradient-border {
//     background:$grad;
//     width:100%;
//     height:rem(1px);
//     @include pseudo;
// }

// @mixin animatedHeader($img, $time: 60s, $animation: animatedHeader) {
//     position: relative;
//     overflow: hidden;

//     &:before {
//         width:100%;
//         height:100%;
//         content: "";
//         position: absolute;
//         background:url($img) center no-repeat;
//         background-size:cover;
//         top:0;
//         left:0;
//         transform: translateZ(0);
//         z-index: -1;
//         animation: $time $animation linear 10ms infinite;
//         background-attachment:fixed;
//         transition:all 0.2s ease-in-out;
//     }
//     @keyframes animatedHeader {
//         0% {
//             transform: scale(1);
//         }
//         50% {
//             transform: scale(1.1);
//         }
//     }
// }
// Use this file for your custom mixins/functions
